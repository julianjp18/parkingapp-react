{"version":3,"sources":["components/App.jsx","serviceWorker.js","index.js"],"names":["App","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","props","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","plates","goodMessage","alert","handleOnAddCar","bind","assertThisInitialized","e","preventDefault","form","target","date","Date","plate","carPlate","txtLetters","value","txtNumbers","getDay","day","getDate","month","getMonth","hours","getHours","minutes","getMinutes","find","findPlate","deletePlate","addPlate","reset","_this2","calcTotal","position","indexOf","valuesPlates","calDays","time","calculateDay","index","setState","setTimeout","console","log","timeA","timeB","timeFinal","timeNow","diffHours","cantTwelves","Math","floor","temp","parse","setHours","react_default","a","createElement","className","onSubmit","htmlFor","type","name","id","required","maxLength","placeholder","title","min","max","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82b21d90.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n\n  constructor(...props){\n    super(...props)\n\n    this.state = {\n      plates: [],\n      goodMessage: false,\n      alert: ''\n    }\n\n    this.handleOnAddCar =this.handleOnAddCar.bind(this)\n  }\n\n  /**\n   * Evento que se activa cuando se da clic en botón 'Ingresar Placa'\n   * Valida si la placa es para ingresar o eliminar del sistema\n   * @param {*} e Evento de formulario  \n   */\n  handleOnAddCar(e){\n\n    e.preventDefault()\n\n    let form = e.target,\n    date = new Date(),\n    plate = {\n      carPlate: form.txtLetters.value + \"-\" + form.txtNumbers.value,\n      date:  date.getDay(), // day of week in number 0 - 6\n      day: date.getDate(), // day in number 0 - 31 \n      month: date.getMonth(), // month in number 0 - 11\n      hours:  date.getHours(),\n      minutes: date.getMinutes(),\n      state: true // validate if the plate is active or not\n    }\n\n    if(this.state.plates.length > 0){\n      if(this.state.plates.find(findPlate => findPlate.carPlate === plate.carPlate && plate.state === true)){\n        this.deletePlate(plate);\n      }else{\n        this.addPlate(plate);\n      }\n    }else{\n      this.addPlate(plate);\n    }\n\n    form.reset()\n  }\n\n  /**\n   * Elimina una placa del sistema\n   * @param {*} plate placa a eliminar\n   */\n  deletePlate(plate){\n    var calcTotal = 0;\n    let position = this.state.plates.indexOf(this.state.plates.find(findPlate => findPlate.carPlate === plate.carPlate && plate.state === true));\n\n    if(position > -1){\n      let valuesPlates = this.state.plates;\n      valuesPlates[position].state = false;\n      \n      // Valida si el dia registrado se encuentra entre semana\n      if(valuesPlates[position].date > 0  && valuesPlates[position].date <= 6){\n        var date = new Date();\n        var calDays = date.getDay() - valuesPlates[position].date,\n        time = valuesPlates[position].hours+\":\"+valuesPlates[position].minutes;\n        \n        // Caso base Si el retiro es en el mismo día\n        if(valuesPlates[position].date === date.getDay()){\n          calcTotal = this.calculateDay(valuesPlates[position],date,time,valuesPlates[position].hours,date.getDate(),date.getMonth());\n         \n        }else{\n          \n          // Si no realizar calculo de los días\n          for (let index = 0; index < calDays+1; index++) {\n            calcTotal = this.calculateDay(valuesPlates[position],date,time,valuesPlates[position].hours,valuesPlates[position].day,valuesPlates[position].month);\n         \n          }\n        }\n          \n        this.setState({\n          plates: valuesPlates,\n          goodMessage: `Se realizó el calculo del pago para la placa ${plate.carPlate} correctamente. \\n\n                        Total a pagar es: ${calcTotal} \n                        `,\n          alert: 'alert alert-warning'\n        });\n       \n      }else{\n        // Si es un fin de semana cobra 8000 el día\n        this.setState({\n          plates: valuesPlates,\n          goodMessage: `Se realizó el calculo del pago correctamente. \\n\n                        Total a pagar es: $ 8000 pesos\n                        `,\n          alert: 'alert alert-warning'\n        });\n       \n        setTimeout(() => {\n          console.log(this.state.plates);\n        }, 2000);\n      }\n\n    }else{\n      this.setState({\n        goodMessage: `ERROR, placa no registrada\n                      `,\n        alert: 'alert alert-danger'\n      });\n    }\n  }\n\n  /**\n   * calcula los precios a pagar\n   */\n  calculateDay(valuesPlates,date,time,hours,day,month){\n    var timeA = new Date('August 19, 1975 23:15:30' ),timeB = new Date('August 19, 1975 23:15:30' ), timeFinal = 0,\n      value = 0, calcTotal = 0,\n      timeNow = date.getHours()+\":\"+date.getMinutes(),\n      diffHours =  date.getHours()-hours;\n    \n      // Valida si la fecha de retiro son más días\n    if(day !== date.getDate() && month !== date.getMonth()){\n      timeNow = \"23:59\";\n    }\n\n    var cantTwelves = Math.floor(diffHours / 12), temp = diffHours;\n    // valida si existen más de 12 horas en el día\n    if(cantTwelves > 0){\n      for (let index = 0; index < cantTwelves; index++) {\n        calcTotal += 12000;\n        diffHours -=12;\n      }\n      timeFinal = (temp * 60);\n      calcTotal += (diffHours * 60) * 40;\n      return  `$ ${calcTotal} pesos, tiempo transcurrido: ${timeFinal} minutos`;\n    }\n\n\n    // Caso base si el ingreso de la placa está entre las 0 y las 7:59, también entre las 19:01 y las 23:59\n    if((Date.parse('01/01/2019 '+time) >= Date.parse('01/01/2019 8:00') && Date.parse('01/01/2019 '+time) <= Date.parse('01/01/2019 7:59')) \n    && (Date.parse('01/01/2019 '+time) >= Date.parse('01/01/2019 19:01') && Date.parse('01/01/2019 '+time) <= Date.parse('01/01/2019 23:59'))){\n      value = 40;\n    }\n\n    // Caso base si la salida de la placa está entre las 0 y las 7:59\n    if(Date.parse('01/01/2019 '+timeNow) >= Date.parse('01/01/2019 00:00') && Date.parse('01/01/2019 '+timeNow) <= Date.parse('01/01/2019 7:59')){\n      timeA.setHours(valuesPlates.hours,valuesPlates.minutes,0);\n      timeB.setHours(date.getHours(),date.getMinutes(),0);\n\n      timeFinal +=(timeB - timeA) / 60000;\n      calcTotal += ((timeB - timeA) / 60000) * value;\n    }\n\n    // Caso base si entró y salió entre las 19:01 y las 23:01\n    if((Date.parse('01/01/2019 '+time) >= Date.parse('01/01/2019 19:01') && Date.parse('01/01/2019 '+time) <= Date.parse('01/01/2019 23:59')) \n    && (Date.parse('01/01/2019 '+timeNow) >= Date.parse('01/01/2019 19:01') && Date.parse('01/01/2019 '+timeNow) <= Date.parse('01/01/2019 23:59'))){\n      timeA.setHours(valuesPlates.hours,valuesPlates.minutes,0);\n      timeB.setHours(date.getHours(),date.getMinutes(),0);\n      \n      timeFinal +=(timeB - timeA) / 60000;\n      calcTotal += ((timeB - timeA) / 60000) * value;\n    }\n\n    // Caso base si el ingreso de la placa está entre las 8 y las 19\n    if(Date.parse('01/01/2019 '+time) >= Date.parse('01/01/2019 8:00') && Date.parse('01/01/2019 '+time) <= Date.parse('01/01/2019 19:00')){\n      value = 70;\n    }\n\n    // Caso base si la salida de la placa está entre las 8 y las 19\n    if(Date.parse('01/01/2019 '+timeNow) >= Date.parse('01/01/2019 8:00') && Date.parse('01/01/2019 '+timeNow) <= Date.parse('01/01/2019 19:00')){\n      timeA.setHours(valuesPlates.hours,valuesPlates.minutes,0);\n      timeB.setHours(date.getHours(),date.getMinutes(),0);\n      \n      timeFinal +=(timeB - timeA) / 60000;\n      calcTotal += ((timeB - timeA) / 60000) * value;\n    }else{\n      // Si no debe estar en horario extra\n      // Calcula lo que llevan en el horario normal\n      timeA.setHours(valuesPlates.hours,valuesPlates.minutes,0);\n      timeB.setHours(19,0,0);\n\n      timeFinal +=(timeB - timeA) / 60000;\n      calcTotal += ((timeB - timeA) / 60000) * value;\n      \n      // Calcula lo que llevan en horario extra\n      value = 40;\n      timeA.setHours(19,1,0);\n      timeB.setHours(date.getHours(),date.getMinutes(),0);\n\n      timeFinal +=(timeB - timeA) / 60000;\n      calcTotal += ((timeB - timeA) / 60000) * value;\n    }\n\n    return  `\n              $ ${calcTotal} pesos, tiempo transcurrido: ${timeFinal} minutos`;\n  }\n\n  /**\n   * Agrega una placa al sistema\n   * @param {*} plate Placa\n   */\n  addPlate(plate){\n    this.setState({\n      plates: this.state.plates.concat([plate]),\n      goodMessage: `Placa ${plate.carPlate} registrada correctamente`,\n      alert: 'alert alert-success'\n    });\n\n  }\n\n  render(){\n    return(\n      <div className=\"jumbotron\">\n          <br />\n          <h1 className=\"text-center\">ParkingApp - App de Prueba</h1>\n          <br />\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <p>Ingresa la placa del vehículo, ya sea para <b>ingreso</b>  o <b>salida</b>.</p>\n              <div className={this.state.alert}>{this.state.goodMessage}</div>\n            </div>\n            <br />\n            <div className=\"col-md-12\">\n              <br/>\n              <form className=\"form-inline justify-content-center\" onSubmit={this.handleOnAddCar}>\n                <div className=\"form-group mb-2\">\n                  <label htmlFor=\"staticEmail2\" className=\"\">Número de placa</label>\n                </div>\n                <div className=\"form-group mx-sm-3 mb-2\">\n                  <input type=\"text\" name=\"txtLetters\" className=\"form-control\" id=\"inputPassword2\" required maxLength=\"3\" placeholder=\"Letras\" title=\"Solamente letras\" />\n                  <label htmlFor=\"inputPassword2\" className=\"\">-</label>\n                  <input type=\"number\" name=\"txtNumbers\" className=\"form-control\" id=\"inputPassword2\" required min=\"0\" max=\"999\" placeholder=\"Números\" />\n                </div>\n                <button type=\"submit\" className=\"btn btn-success mb-2\">Ingresar placa</button>\n              </form>\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}